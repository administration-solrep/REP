<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Entêtes" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Host " elementType="Header">
            <stringProp name="Header.name">Host </stringProp>
            <stringProp name="Header.value">idlv-solon-intel.lyon-dev2.local</stringProp>
          </elementProp>
          <elementProp name="User-Agent " elementType="Header">
            <stringProp name="Header.name">User-Agent </stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
          </elementProp>
          <elementProp name="Accept " elementType="Header">
            <stringProp name="Header.name">Accept </stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="Accept-Language " elementType="Header">
            <stringProp name="Header.name">Accept-Language </stringProp>
            <stringProp name="Header.value">fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding " elementType="Header">
            <stringProp name="Header.name">Accept-Encoding </stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
          <elementProp name="Connection " elementType="Header">
            <stringProp name="Header.name">Connection </stringProp>
            <stringProp name="Header.value">keep-alive</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Définition environnement" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERVERNAME" elementType="Argument">
            <stringProp name="Argument.name">SERVERNAME</stringProp>
            <stringProp name="Argument.value">idlv-solon-intel.lyon-dev2.local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminsggPwd" elementType="Argument">
            <stringProp name="Argument.name">adminsggPwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user1" elementType="Argument">
            <stringProp name="Argument.name">user1</stringProp>
            <stringProp name="Argument.value">user1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user1Pwd" elementType="Argument">
            <stringProp name="Argument.name">user1Pwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user2" elementType="Argument">
            <stringProp name="Argument.name">user2</stringProp>
            <stringProp name="Argument.value">user2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user2Pwd" elementType="Argument">
            <stringProp name="Argument.name">user2Pwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user3" elementType="Argument">
            <stringProp name="Argument.name">user3</stringProp>
            <stringProp name="Argument.value">user3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user3Pwd" elementType="Argument">
            <stringProp name="Argument.name">user3Pwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user4" elementType="Argument">
            <stringProp name="Argument.name">user4</stringProp>
            <stringProp name="Argument.value">user4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user4Pwd" elementType="Argument">
            <stringProp name="Argument.name">user4Pwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userAvecCorbeille" elementType="Argument">
            <stringProp name="Argument.name">userAvecCorbeille</stringProp>
            <stringProp name="Argument.value">userCorbeille1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userAvecCorbeillePwd" elementType="Argument">
            <stringProp name="Argument.name">userAvecCorbeillePwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dateDuJour" elementType="Argument">
            <stringProp name="Argument.name">dateDuJour</stringProp>
            <stringProp name="Argument.value">${__time(dd MMMM yyyy,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user2AvecCorbeille" elementType="Argument">
            <stringProp name="Argument.name">user2AvecCorbeille</stringProp>
            <stringProp name="Argument.value">userCorbeille2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user2AvecCorbeillePwd" elementType="Argument">
            <stringProp name="Argument.name">user2AvecCorbeillePwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user3AvecCorbeille" elementType="Argument">
            <stringProp name="Argument.name">user3AvecCorbeille</stringProp>
            <stringProp name="Argument.value">userCorbeille3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user3AvecCorbeillePwd" elementType="Argument">
            <stringProp name="Argument.name">user3AvecCorbeillePwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user4AvecCorbeille" elementType="Argument">
            <stringProp name="Argument.name">user4AvecCorbeille</stringProp>
            <stringProp name="Argument.value">userCorbeille4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user4AvecCorbeillePwd" elementType="Argument">
            <stringProp name="Argument.name">user4AvecCorbeillePwd</stringProp>
            <stringProp name="Argument.value">reponses</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Statistiques sur les résultats" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scénarios de test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <longProp name="ThreadGroup.start_time">1435917226000</longProp>
        <longProp name="ThreadGroup.end_time">1435917226000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scénario 1 (Test de connexion)" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Page Login" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1 accès page login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/login.jsp</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//i[text()=&quot;Bienvenue dans l&apos;outil interministériel de traitement des questions écrites&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Sélection de l&apos;utilisateur" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.value">adminsgg</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.value">${adminsggPwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain ${__BeanShell(vars.put(&quot;idValue&quot;,1))}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.value">${user1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.value">${user1Pwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain ${__BeanShell(vars.put(&quot;idValue&quot;,1))}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.value">${user2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.value">${user2Pwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain ${__BeanShell(vars.put(&quot;idValue&quot;,1))}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.value">${user3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.value">${user3Pwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain ${__BeanShell(vars.put(&quot;idValue&quot;,1))}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.value">${user4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.value">${user4Pwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain ${__BeanShell(vars.put(&quot;idValue&quot;,1))}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Se déconnecter" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Déconnexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/logout</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//i[text()=&quot;Bienvenue dans l&apos;outil interministériel de traitement des questions écrites&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scénario 2 (Test de parcours des différents menus de l&apos;application)" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Accès application" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="1783491224">Page Login</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Se logguer" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="1770673857">Sélection de l&apos;utilisateur</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Onglet Recherche" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3 Aller à la recherche" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="userServicesForm_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="userServicesForm:userServicesActionsTable:2:userServicesActionCommandLink" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">userServicesForm:userServicesActionsTable:2:userServicesActionCommandLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm:userServicesActionsTable:2:userServicesActionCommandLink</stringProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">espace_recherche</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//title[text()=&quot;Recherche&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Onglet Plan de classement" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Aller à &quot;Plan de classement&quot;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="userServicesForm_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="userServicesForm:userServicesActionsTable:1:userServicesActionCommandLink" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">userServicesForm:userServicesActionsTable:1:userServicesActionCommandLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm:userServicesActionsTable:1:userServicesActionCommandLink</stringProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">espace_plan_classement</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1791072426">&lt;h4&gt;Plan de classement&lt;/h4&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Onglet Espace de travail" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5 Aller à &quot;Espace de travail&quot;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="userServicesForm_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="userServicesForm:userServicesActionsTable:0:userServicesActionCommandLink" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">userServicesForm:userServicesActionsTable:0:userServicesActionCommandLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm:userServicesActionsTable:0:userServicesActionCommandLink</stringProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">espace_travail</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/plan_classement_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h4[text()=&quot;Mes favoris de travail&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h4[text()=&quot;Mes favoris du plan de classement&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Onglet Suivi" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6 Aller à &quot;Suivi&quot;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="userServicesForm_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="userServicesForm:userServicesActionsTable:3:userServicesActionCommandLink" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">userServicesForm:userServicesActionsTable:3:userServicesActionCommandLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm:userServicesActionsTable:3:userServicesActionCommandLink</stringProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">espace_suivi</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h4[text()=&quot;Requêtes&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h6[text()=&quot;Requêtes générales&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h6[text()=&quot;Requêtes personnelles&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Onglet Administration" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7 Aller à &quot;Administration&quot;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="userServicesForm_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="userServicesForm:userServicesActionsTable:4:userServicesActionCommandLink" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">userServicesForm:userServicesActionsTable:4:userServicesActionCommandLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm:userServicesActionsTable:4:userServicesActionCommandLink</stringProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">espace_administration</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/suivi/view_suivi.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1433504144">&lt;span class=&quot;subMenu&quot;&gt;Batchs&lt;/span&gt;</stringProp>
                  <stringProp name="1488013017">&lt;span class=&quot;subMenu&quot;&gt;Utilisateurs&lt;/span&gt;</stringProp>
                  <stringProp name="921310978">&lt;span class=&quot;subMenu&quot;&gt;Journal&lt;/span&gt;</stringProp>
                  <stringProp name="202807121">&lt;span class=&quot;subMenu&quot;&gt;Feuille de route&lt;/span&gt;</stringProp>
                  <stringProp name="1776750987">&lt;span class=&quot;subMenu&quot;&gt;Param&amp;egrave;tres&lt;/span&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Onglet Statistique" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8 Aller à &quot;Statistique&quot;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="userServicesForm_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="userServicesForm:userServicesActionsTable:5:userServicesActionCommandLink" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">userServicesForm:userServicesActionsTable:5:userServicesActionCommandLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">userServicesForm:userServicesActionsTable:5:userServicesActionCommandLink</stringProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">espace_statistiques</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/view_empty.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1944124569">26 &amp;eacute;tats statistiques</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Se déconnecter" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="-1468639484">Se déconnecter</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scénario 3 (Test de consultation d&apos;un dossier dans la corbeille)" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Accès application" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="1783491224">Page Login</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Connexion avec un utilisateur à corbeille" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${userAvecCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${userAvecCorbeillePwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération de la corbeille du ministère" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;userConnect&quot;, vars.get(&quot;userAvecCorbeille&quot;));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${user2AvecCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${user2AvecCorbeillePwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération de la corbeille du ministère" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;userConnect&quot;, vars.get(&quot;user2AvecCorbeille&quot;));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${user3AvecCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${user3AvecCorbeillePwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération de la corbeille du ministère" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;userConnect&quot;, vars.get(&quot;user3AvecCorbeille&quot;));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 connexion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="user_name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${user4AvecCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_name</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="user_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${user4AvecCorbeillePwd}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">user_password</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">fr</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="requestedUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestedUrl</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="form_submitted_marker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">form_submitted_marker</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="Submit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Connexion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">Submit</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/nxstartup.faces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1842090790">Mon identifiant dans REPONSES</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération de la corbeille du ministère" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;userConnect&quot;, vars.get(&quot;user4AvecCorbeille&quot;));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Ouvrir un dossier" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3 Sélectionner premier élément (et ouverture de l&apos;onglet parapheur)" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">contentViewAjaxRegion_0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                  </elementProp>
                  <elementProp name="corbeille_content_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">corbeille_content_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="${premierLien}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${premierLien}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${premierLien}</stringProp>
                  </elementProp>
                  <elementProp name="AJAX:EVENTS_COUNT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX:EVENTS_COUNT</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Affichage de la question" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="conversationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0NXMAIN</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">conversationId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Bordereau" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">bordereau</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Bordereau&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Fond de dossier" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">fdd</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Fond de dossier&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Feuille de route" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">fdr</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Feuille de route&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Journal" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">journal</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Journal&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Dossiers Connexes" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">connexes</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Dossiers Connexes&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Allotissement" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">allotissement</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Allotissement&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Parapheur&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text()=&quot;Question&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[contains(text(),&quot;Réponse&quot;)]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text()=&quot;Pièces destinées au Parlement&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Parcourir un dossier" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5 aller à l&apos;onglet bordereau" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bordereau}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans bordereau on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données principales&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Indexation complémentaire&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données secondaires&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6 aller à l&apos;onglet fond de dossier" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${fdd}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans fdd on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text()=&quot;Fond De Dossier&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7 aller à l&apos;onglet feuille de route" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${fdr}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans fdr on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-370135021">&lt;th&gt;Action&lt;/th&gt;</stringProp>
                  <stringProp name="-1426647671">&lt;th&gt;Minist&amp;egrave;re&lt;/th&gt;</stringProp>
                  <stringProp name="633356416">&lt;th&gt;Poste&lt;/th&gt;</stringProp>
                  <stringProp name="-378294185">&lt;th&gt;Note&lt;/th&gt;</stringProp>
                  <stringProp name="1452249646">&lt;th&gt;Obligatoire&lt;/th&gt;</stringProp>
                  <stringProp name="279393782">&lt;th&gt;Ech&amp;eacute;ance&lt;/th&gt;</stringProp>
                  <stringProp name="-1735482169">&lt;th&gt;Date de traitement&lt;/th&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8 aller à l&apos;onglet journal" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${journal}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans journal on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="9 aller à l&apos;onglet dossiers connexes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${connexes}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans connexes on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[@class=&quot;folded&quot;]/a[text()=&quot;Liste des questions connexes par ministère&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10 aller à l&apos;onglet allotissement" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${allotissement}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans allotissement on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1442519032">&lt;a href=&quot;#nologo&quot; onclick=&quot;return toggleBox(this)&quot;&gt;Allotissement :</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Se déconnecter" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="-1468639484">Se déconnecter</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scénario 4 (Test de la recherche avancée)" enabled="true"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Accès application" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="1783491224">Page Login</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Se logguer" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="1770673857">Sélection de l&apos;utilisateur</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Onglet Recherche" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1794243605">Scénario 2 (Test de parcours des différents menus de l&apos;application)</stringProp>
              <stringProp name="1740317902">Onglet Recherche</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Recherche aléatoire" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="RespTimeGraph.interval">1000</stringProp>
            </ResultCollector>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_legislature" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_legislature</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_type_question_list" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">QE</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_type_question_list</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_critereRequete" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_critereRequete</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_auteur" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_auteur</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:j_id269_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:j_id269_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_groupePolitique" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_groupePolitique</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:j_id296:j_id297:j_id298" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:j_id296:j_id297:j_id298</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:j_id317:j_id322:j_id323" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:j_id317:j_id322:j_id323</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_nodeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_nodeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_directionPilote_nodeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_directionPilote_nodeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteTexteIntegral:nxw_critere_requete" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteTexteIntegral:nxw_critere_requete</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteTexteIntegral:nxw_dansTexteQuestion" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteTexteIntegral:nxw_dansTexteQuestion</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:currentIndexationMode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">INDEX_ORIG</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:currentIndexationMode</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteIndexSenat:nxw_simple_indexation_senat_indexLabel_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteIndexSenat:nxw_simple_indexation_senat_indexLabel_</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteIndexAN:nxw_simple_indexation_an_index_suggestBox__selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteIndexAN:nxw_simple_indexation_an_index_suggestBox__selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteIndexMinistere:nxw_simple_indexation_ministere_indexLabel_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteIndexMinistere:nxw_simple_indexation_ministere_indexLabel_</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_routeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_routeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_typeStep" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_typeStep</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_statusStep" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_statusStep</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_nodeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_nodeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:rechercheSubmitButton" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Recherche</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:rechercheSubmitButton</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form_SUBMIT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form_SUBMIT</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments"> 1523 résultats : type question = QE + Ministère rattachement = Secrétariat d&apos;État, auprès du ministère des affaires sociales et de la santé, chargé des personnes handicapées et de la lutte contre l&apos;exclusion (60004861)</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 2" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4404&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QOSD&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=20000102&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">14 résultats : type question = QOSD + ministère rattachement = Premier ministre</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 3" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4514&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QE&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id118=SENAT&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id129=AvecReponse&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">103 résultats : type question = QE + émetteur = Sénat + ministère rattachement = Secrétariat d&apos;état (...) Personnes âgées et autonomie (60004864) + état = Répondu</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 4" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4402&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QE&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">593 résultats : type question = QE + ministère Rattachement = Ministère des familles, de l’enfance et des droits des femmes (60004913)</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 5" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_legislature" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_legislature</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_type_question_list" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">QE</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_type_question_list</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_critereRequete" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_critereRequete</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOQuestion:nxw_dateJOQuestion_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateJOReponse:nxw_dateJOReponse_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_dateSignalement:nxw_dateSignalement_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_auteur" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_auteur</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:j_id269_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:j_id269_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_groupePolitique" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_groupePolitique</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:j_id296:j_id297:j_id298" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:j_id296:j_id297:j_id298</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:j_id317:j_id322:j_id323" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:j_id317:j_id322:j_id323</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_nodeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_ministereRattachement_nodeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_directionPilote_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteSimple:nxw_directionPilote_nodeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteSimple:nxw_directionPilote_nodeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteTexteIntegral:nxw_critere_requete" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteTexteIntegral:nxw_critere_requete</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteTexteIntegral:nxw_dansTexteQuestion" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteTexteIntegral:nxw_dansTexteQuestion</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:currentIndexationMode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">INDEX_ORIG</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:currentIndexationMode</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteIndexSenat:nxw_simple_indexation_senat_indexLabel_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteIndexSenat:nxw_simple_indexation_senat_indexLabel_</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteIndexAN:nxw_simple_indexation_an_index_suggestBox__selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteIndexAN:nxw_simple_indexation_an_index_suggestBox__selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteIndexMinistere:nxw_simple_indexation_ministere_indexLabel_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteIndexMinistere:nxw_simple_indexation_ministere_indexLabel_</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_route_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_routeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_titreFeuilleRoute_routeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_typeStep" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_typeStep</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeBeginDateStep:nxw_rangeBeginDateStep_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_fromInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputCurrentDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">05/2016</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_rangeEndDateStep:nxw_rangeEndDateStep_toInputCurrentDate</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_statusStep" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_statusStep</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggest" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggest</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggestionBox_selection" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_suggestionBox_selection</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_nodeId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:nxl_requeteFeuilleRoute:nxw_posteStep_nodeId</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form:rechercheSubmitButton" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Recherche</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form:rechercheSubmitButton</stringProp>
                    </elementProp>
                    <elementProp name="requete_all_form_SUBMIT" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">requete_all_form_SUBMIT</stringProp>
                    </elementProp>
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">5715 résultats : Ministère rattachement = Ministère des travailleurs (60005081)</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 6" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4522&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QE&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id129=AvecReponse&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_etatRenouvele=on&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">921 résultat : Type question = QE + Ministère rattachement = Ministère de l&apos;éducation nationale, de l&apos;enseignement supérieur et de la recherche (60004363)</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 7" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4456&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QE&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id129=AvecReponse&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=12*&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">6218 résultats : Type question = QE + Question = répondu + Numéro 12*</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 8" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4456&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QE&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id129=AvecReponse&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=135*&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">171 résultats : Type question = QE + Question = répondu + Numéro 135*</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 9" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4456&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QE&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id129=AvecReponse&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=253*&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">109 résultats : Type question = QE + Question = répondu + Numéro 253*</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recherche 10" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4 Requête de recherche" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Content-Type: application/x-www-form-urlencoded&#xd;
Content-Length: 4456&#xd;
&#xd;
requete_all_form%3Anxl_requeteSimple%3Anxw_legislature=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_type_question_list=QE&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id129=AvecReponse&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_critereRequete=*243*&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOQuestion%3Anxw_dateJOQuestion_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateJOReponse%3Anxw_dateJOReponse_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputDate=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_dateSignalement%3Anxw_dateSignalement_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_auteur=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id269_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_groupePolitique=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id296%3Aj_id297%3Aj_id298=&amp;requete_all_form%3Anxl_requeteSimple%3Aj_id317%3Aj_id322%3Aj_id323=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_ministereRattachement_nodeId=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggest=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteSimple%3Anxw_directionPilote_nodeId=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_critere_requete=&amp;requete_all_form%3Anxl_requeteTexteIntegral%3Anxw_dansTexteQuestion=on&amp;requete_all_form%3AcurrentIndexationMode=INDEX_ORIG&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexSenat%3Anxw_simple_indexation_senat_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_indexLabel_=&amp;requete_all_form%3Anxl_requeteIndexAN%3Anxw_simple_indexation_an_index_suggestBox__selection=&amp;requete_all_form%3Anxl_requeteIndexMinistere%3Anxw_simple_indexation_ministere_indexLabel_=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_route_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_titreFeuilleRoute_routeId=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_typeStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeBeginDateStep%3Anxw_rangeBeginDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_fromInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputDate=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_rangeEndDateStep%3Anxw_rangeEndDateStep_toInputCurrentDate=05%2F2016&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_statusStep=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggest=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_suggestionBox_selection=&amp;requete_all_form%3Anxl_requeteFeuilleRoute%3Anxw_posteStep_nodeId=&amp;requete_all_form%3ArechercheSubmitButton=Recherche&amp;requete_all_form_SUBMIT=1&amp;javax.faces.ViewState=${j_idCorbeille}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/reponses/recherche/edit_recherche.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">379 résultats : Type question = QE + Question = répondu + Numéro *243*</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">premierLien</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//div[@class=&apos;popupTarget&apos;]/a/@id)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                  <stringProp name="XPathExtractor.default">ERROR</stringProp>
                  <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">true</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                  <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                  <boolProp name="XPathExtractor.report_errors">true</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                  <boolProp name="XPath.negate">false</boolProp>
                  <stringProp name="XPath.xpath">//input[@value=&apos;Exporter la liste des résultats en format Excel&apos;]</stringProp>
                  <boolProp name="XPath.validate">false</boolProp>
                  <boolProp name="XPath.whitespace">false</boolProp>
                  <boolProp name="XPath.tolerant">true</boolProp>
                  <boolProp name="XPath.namespace">false</boolProp>
                </XPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Ouvrir un dossier" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5 Sélectionner premier élément (et ouverture de l&apos;onglet parapheur)" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">contentViewAjaxRegion_requeteComposite</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                  </elementProp>
                  <elementProp name="requeteComposite_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requeteComposite_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="${premierLien}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${premierLien}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${premierLien}</stringProp>
                  </elementProp>
                  <elementProp name="AJAX:EVENTS_COUNT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX:EVENTS_COUNT</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/recherche/requete_resultats.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="255250042">Parapheur&lt;/a&gt;</stringProp>
                  <stringProp name="-693375896">&lt;h3 class=&quot;summaryTitle&quot;&gt;Question&lt;/h3&gt;</stringProp>
                  <stringProp name="-1748872566">&lt;h3 class=&quot;summaryTitle&quot;&gt;Réponse &lt;span onmouseover=&quot;tooltip.show(&apos;Pour répondre, verrouiller le dossier&apos;, 500);&quot; onmouseout=&quot;tooltip.hide();&quot;&gt;&lt;img src=&quot;/reponses/icons/lightbulb.png&quot; /&gt;&lt;/span&gt;&lt;/h3&gt;</stringProp>
                  <stringProp name="-987898152">&lt;h3 class=&quot;summaryTitle&quot;&gt;Pièces destinées au Parlement&lt;/h3&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Bordereau" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">bordereau</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Bordereau&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Fond de dossier" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">fdd</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Fond de dossier&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Feuille de route" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">fdr</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Feuille de route&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Journal" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">journal</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Journal&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Dossiers Connexes" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">connexes</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Dossiers Connexes&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Allotissement" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">allotissement</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[text()=&apos;Allotissement&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Parcourir un dossier" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6 aller à l&apos;onglet bordereau" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bordereau}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans bordereau on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2112371443">&lt;a href=&quot;#nologo&quot; onclick=&quot;return toggleBox(this)&quot;&gt;Donn&amp;eacute;es principales&lt;/a&gt;</stringProp>
                  <stringProp name="218956497">&lt;h3 class=&quot;summaryTitle&quot;&gt;Mise &amp;agrave; jour</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7 aller à l&apos;onglet fond de dossier" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${fdd}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans fdd on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1919779690">&lt;h3&gt;Fond De Dossier</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8 aller à l&apos;onglet feuille de route" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${fdr}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans fdr on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-370135021">&lt;th&gt;Action&lt;/th&gt;</stringProp>
                  <stringProp name="-1426647671">&lt;th&gt;Minist&amp;egrave;re&lt;/th&gt;</stringProp>
                  <stringProp name="633356416">&lt;th&gt;Poste&lt;/th&gt;</stringProp>
                  <stringProp name="-378294185">&lt;th&gt;Note&lt;/th&gt;</stringProp>
                  <stringProp name="1452249646">&lt;th&gt;Obligatoire&lt;/th&gt;</stringProp>
                  <stringProp name="279393782">&lt;th&gt;Ech&amp;eacute;ance&lt;/th&gt;</stringProp>
                  <stringProp name="-1735482169">&lt;th&gt;Date de traitement&lt;/th&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="9 aller à l&apos;onglet journal" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${journal}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans journal on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10 aller à l&apos;onglet dossiers connexes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${connexes}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans connexes on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1031995558">&lt;a href=&quot;#nologo&quot; onclick=&quot;return toggleBox(this)&quot;&gt;Liste des questions connexes par minist&amp;egrave;re</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11 aller à l&apos;onglet allotissement" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${allotissement}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans allotissement on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1442519032">&lt;a href=&quot;#nologo&quot; onclick=&quot;return toggleBox(this)&quot;&gt;Allotissement :</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Se déconnecter" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="-1468639484">Se déconnecter</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scénario 5 (Test de modification d&apos;un dossier dans la corbeille)" enabled="false"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Accès application" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="2099499709">Scénario 1</stringProp>
              <stringProp name="1783491224">Page Login</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Connexion avec un utilisateur à corbeille" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="2146693067">Scénario 3 (Test de consultation d&apos;un dossier dans la corbeille)</stringProp>
              <stringProp name="992421879">Connexion avec un utilisateur à corbeille</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Ouverture du premier dossier de sa corbeille" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="2146693067">Scénario 3 (Test de consultation d&apos;un dossier dans la corbeille)</stringProp>
              <stringProp name="-1636969575">Ouvrir un dossier</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Modifier un dossier" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5 aller à l&apos;onglet bordereau" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${bordereau}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans bordereau on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Lien Parapheur" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">parapheur</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//a[text()=&apos;Parapheur&apos;]/@href</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données principales&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Indexation complémentaire&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données secondaires&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">btnVerrouJId</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)formFdr:dossierActionsLockTable:0:(.*)&apos;:&apos;formFdr:dossierActionsLockTable:0:(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6 verrouiller le bordereau" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="formFdr:reject_task_panelOpenedState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:reject_task_panelOpenedState</stringProp>
                  </elementProp>
                  <elementProp name="formFdr_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="formFdr:dossierActionsLockTable:0:${btnVerrouJId}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">formFdr:dossierActionsLockTable:0:${btnVerrouJId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:dossierActionsLockTable:0:${btnVerrouJId}</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données principales&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Indexation complémentaire&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données secondaires&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//td[text() = &quot;Verrouillé le ${dateDuJour}, par ${userConnect}&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//li[text() = &quot;Dossier verrouillé !&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7 rafraichissement du bordereau" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="conversationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0NXMAIN</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">conversationId</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données principales&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Indexation complémentaire&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données secondaires&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">btnSauvegarderEtapeJId</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)formFdr:dossierActionsEditTable:0:(.*)&apos;:&apos;formFdr:dossierActionsEditTable:0:(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="8 Saisie du ministère de rattachement" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">document_properties:documentViewRegion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Min. Affaires étrangères et européennes</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggest</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_nodeId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50000507</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_nodeId</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggest</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggestionBox_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggestionBox_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_nodeId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50000655</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_nodeId</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_0</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_0_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_0_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_1</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_1_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_1_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_2</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_2_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_2_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_0</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_0_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_0_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_1</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_1_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_1_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_2</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_2_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_2_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexMinistere:nxw_indexation_ministere_indexLabel_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexMinistere:nxw_indexation_ministere_indexLabel_</stringProp>
                  </elementProp>
                  <elementProp name="document_properties_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox</stringProp>
                  </elementProp>
                  <elementProp name="selectionType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">MIN_TYPE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">selectionType</stringProp>
                  </elementProp>
                  <elementProp name="ajaxSingle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ajaxSingle</stringProp>
                  </elementProp>
                  <elementProp name="activatePosteFilter" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">activatePosteFilter</stringProp>
                  </elementProp>
                  <elementProp name="inputvalue" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Min. Affaires étrangères et européennes</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">inputvalue</stringProp>
                  </elementProp>
                  <elementProp name="AJAX:EVENTS_COUNT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX:EVENTS_COUNT</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="9 Modification du ministère de rattachement" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">document_properties:documentViewRegion</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggest</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_nodeId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50000507</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_nodeId</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggest" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggest</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggestionBox_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_suggestionBox_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_nodeId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">50000655</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_direction_pilote:nxw_direction_pilote_bordereau_nodeId</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_0</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_0_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_0_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_1</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_1_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_1_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_indexLabel_2</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_2_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexAN:nxw_indexation_an_index_suggestBox_2_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_0</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_0_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_0_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_1</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_1_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_1_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_indexLabel_2</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_2_selection" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexSenat_1:nxw_indexation_senat_1_index_suggestBox_2_selection</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bdIndexMinistere:nxw_indexation_ministere_indexLabel_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bdIndexMinistere:nxw_indexation_ministere_indexLabel_</stringProp>
                  </elementProp>
                  <elementProp name="document_properties_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="suggestionSelectionDeleteId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">nxw_ministere_rattachement_bordereau_selection_reset</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">suggestionSelectionDeleteId</stringProp>
                  </elementProp>
                  <elementProp name="suggestionSelectionHiddenId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">nxw_ministere_rattachement_bordereau_nodeId</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">suggestionSelectionHiddenId</stringProp>
                  </elementProp>
                  <elementProp name="selectionType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">MIN_TYPE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">selectionType</stringProp>
                  </elementProp>
                  <elementProp name="ajaxSingle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ajaxSingle</stringProp>
                  </elementProp>
                  <elementProp name="activatePosteFilter" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">activatePosteFilter</stringProp>
                  </elementProp>
                  <elementProp name="suggestionSelectionOutputId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">nxw_ministere_rattachement_bordereau_node</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">suggestionSelectionOutputId</stringProp>
                  </elementProp>
                  <elementProp name="document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox:nxw_ministere_rattachement_bordereau_listRegion_select" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox:nxw_ministere_rattachement_bordereau_listRegion_select</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">document_properties:nxl_bordereau_ministere_rattachement:nxw_ministere_rattachement_bordereau_suggestionBox:nxw_ministere_rattachement_bordereau_listRegion_select</stringProp>
                  </elementProp>
                  <elementProp name="AJAX:EVENTS_COUNT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">AJAX:EVENTS_COUNT</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10 rafraichissement du bordereau" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="conversationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0NXMAIN</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">conversationId</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données principales&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Indexation complémentaire&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//a[text()=&quot;Données secondaires&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11 Sauvegarde" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="formFdr:reject_task_panelOpenedState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:reject_task_panelOpenedState</stringProp>
                  </elementProp>
                  <elementProp name="formFdr_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="formFdr:dossierActionsEditTable:0:${btnSauvegarderEtapeJId}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">formFdr:dossierActionsEditTable:0:${btnSauvegarderEtapeJId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:dossierActionsEditTable:0:${btnSauvegarderEtapeJId}</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//li[text()=&quot;Dossier déverrouillé.&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12 aller à l&apos;onglet parapheur" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${parapheur}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Dans parapheur on a l&apos;url complète du coup rien besoin d&apos;avoir en plus !</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text()=&quot;Question&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text() = &quot;Réponse &quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text()=&quot;Pièces destinées au Parlement&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13 verrouiller le parapheur" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="formFdr:reject_task_panelOpenedState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:reject_task_panelOpenedState</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="formFdr_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr_SUBMIT</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="formFdr:dossierActionsLockTable:0:${btnVerrouJId}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">formFdr:dossierActionsLockTable:0:${btnVerrouJId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:dossierActionsLockTable:0:${btnVerrouJId}</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//li[text() = &quot;Dossier verrouillé !&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text()=&quot;Question&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text() = &quot;Réponse&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//h3[text()=&quot;Pièces destinées au Parlement&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//td[text() = &quot;Verrouillé le ${dateDuJour}, par ${userConnect}&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">btnSauvegarderReponseJId</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)actionToolbarForm:(.*)&apos;:&apos;actionToolbarForm:(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">ERROR</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">txtReponseJId</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//textarea/@id[contains(.,&quot;actionToolbarForm&quot;)]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14 Modification de la réponse" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="${txtReponseJId}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eligendi non quis exercitationem culpa nesciunt nihil aut nostrum explicabo reprehenderit optio amet ab temporibus asperiores quasi cupiditate. Voluptatum ducimus voluptates voluptas?&lt;/p&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${txtReponseJId}</stringProp>
                  </elementProp>
                  <elementProp name="${txtReponseJId}selector" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">text/html</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">${txtReponseJId}selector</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="actionToolbarForm_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">actionToolbarForm_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                  </elementProp>
                  <elementProp name="actionToolbarForm:${btnSauvegarderReponseJId}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">actionToolbarForm:${btnSauvegarderReponseJId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">actionToolbarForm:${btnSauvegarderReponseJId}</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//li[text()=&quot;Dossier déverrouillé.&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//li[text()=&quot;La réponse a été enregistrée&quot;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15 valider une étape" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="formFdr:reject_task_panelOpenedState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:reject_task_panelOpenedState</stringProp>
                  </elementProp>
                  <elementProp name="formFdr_SUBMIT" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr_SUBMIT</stringProp>
                  </elementProp>
                  <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${j_idCorbeille}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    <stringProp name="Argument.desc">false</stringProp>
                  </elementProp>
                  <elementProp name="formFdr:fdrActionsTable:0:fdrValidateButton" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">formFdr:fdrActionsTable:0:fdrValidateButton</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">formFdr:fdrActionsTable:0:fdrValidateButton</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/casemanagement/mailbox/mailbox_view.faces</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//li[contains(text(),&quot;Vous venez de valider le dossier&quot;)]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">true</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Récupération du j_id" enabled="true">
                <stringProp name="XPathExtractor.default">ERROR</stringProp>
                <stringProp name="XPathExtractor.refname">j_idCorbeille</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">(//input[@id=&apos;javax.faces.ViewState&apos;]/@value)[1]</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">true</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <boolProp name="XPathExtractor.show_warnings">true</boolProp>
                <boolProp name="XPathExtractor.report_errors">true</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Se déconnecter" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="-1468639484">Se déconnecter</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scénario 6 (Test d&apos;envoi dequestion par WebService)" enabled="false"/>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Accès application" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="1783491224">Page Login</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Connexion avec un utilisateur" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="1770673857">Sélection de l&apos;utilisateur</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Envoi de question via webservice" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2 Appel WebService" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/reponses/site/reponses/WSquestion/envoyerQuestions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Logiciels\envoi_question.xml" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Logiciels\envoi_question.xml</stringProp>
                    <stringProp name="File.paramname"></stringProp>
                    <stringProp name="File.mimetype">text/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//ns3:envoyerQuestionsResponse</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">true</boolProp>
                <boolProp name="XPath.download_dtds">true</boolProp>
              </XPathAssertion>
              <hashTree/>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//ns2:id_question</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">true</boolProp>
                <boolProp name="XPath.download_dtds">true</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Se déconnecter" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="-234364424">Scénarios de test</stringProp>
              <stringProp name="-1457548074">Scénario 1 (Test de connexion)</stringProp>
              <stringProp name="-1468639484">Se déconnecter</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Détail des résultats" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
